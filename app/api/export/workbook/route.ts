
import { NextResponse } from "next/server"; import { PrismaClient } from "@prisma/client"; import * as XLSX from "xlsx"; const prisma = new PrismaClient();
export const dynamic = 'force-dynamic'; // ⛔️ disable static generation
export async function GET(req: Request) {
  // Prisma code...
 const [players, buyers, sales, games, winners] = await Promise.all([ prisma.player.findMany(), prisma.buyer.findMany(), prisma.sale.findMany({ include: { buyer: true, player: true } }), prisma.game.findMany(), prisma.winner.findMany({ include: { player: true, game: true } }) ]); const wb = XLSX.utils.book_new(); XLSX.utils.book_append_sheet(wb, XLSX.utils.json_to_sheet(players), "Players"); XLSX.utils.book_append_sheet(wb, XLSX.utils.json_to_sheet(buyers), "Buyers"); XLSX.utils.book_append_sheet(wb, XLSX.utils.json_to_sheet(sales), "Sales"); XLSX.utils.book_append_sheet(wb, XLSX.utils.json_to_sheet(games), "Games"); XLSX.utils.book_append_sheet(wb, XLSX.utils.json_to_sheet(winners), "Winners"); const buf = XLSX.write(wb, { type: "buffer", bookType: "xlsx" }); return new NextResponse(buf as any, { status: 200, headers: { "Content-Type": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "Content-Disposition": 'attachment; filename="mnf-squares-export.xlsx"' } }); }
