import { NextResponse } from 'next/server'; import { PrismaClient } from '@prisma/client'; import { signSession } from '@/app/lib/auth'; const prisma=new PrismaClient(); export async function GET(req:Request){ const { searchParams } = new URL(req.url); const token=searchParams.get('token')||''; const redirect=searchParams.get('redirect')||'/dashboard'; if(!token) return NextResponse.json({ error:'token required' }, { status:400 }); const row=await prisma.magicLinkToken.findUnique({ where:{ token } }); if(!row || row.usedAt || row.expiresAt < new Date()) return NextResponse.json({ error:'invalid or expired token' }, { status:400 }); await prisma.magicLinkToken.update({ where:{ token }, data:{ usedAt:new Date() } }); let user=await prisma.user.findUnique({ where:{ email: row.email } }); if(!user) user=await prisma.user.create({ data:{ email: row.email, role:'VIEWER' } }); const tokenJwt=signSession({ role: user.role as any, name: user.email }); const res = NextResponse.redirect(new URL(redirect, process.env.APP_BASE_URL || 'http://localhost:3000')); res.headers.append('Set-Cookie', `session=${tokenJwt}; Path=/; HttpOnly; SameSite=Lax; Max-Age=604800`); res.headers.append('Set-Cookie', `role=${user.role}; Path=/; SameSite=Lax; Max-Age=604800`); return res; }
