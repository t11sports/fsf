
'use client';
import { useEffect, useState } from 'react';
import confetti from 'canvas-confetti';
type Quarter = "Q1"|"Q2"|"Q3"|"FINAL";
export default function LiveGame({ params }:{ params:{ gameId:string } }){
  const [scores, setScores] = useState<Record<Quarter,{away:number;home:number}>>({ Q1:{away:0,home:0}, Q2:{away:0,home:0}, Q3:{away:0,home:0}, FINAL:{away:0,home:0} });
  const [boardNumber,setBoardNumber]=useState(1); const [winners,setWinners]=useState<any[]>([]);
  const [role,setRole]=useState(''); useEffect(()=>{ fetch('/api/auth/me').then(r=>r.json()).then(j=>setRole(j?.role||'')); },[]);
  const canUpdate = role==='ADMIN'||role==='ORGANIZER';
  async function updateWinners(){ const r = await fetch('/api/winners/batch-from-scores',{ method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ gameId: params.gameId, boardNumber, scores }) }); const j=await r.json(); setWinners(j.winners||[]); if((j.winners||[]).length) confetti({ particleCount: 100, spread: 60, origin: { y: 0.8 } }); }
  return (<div className="space-y-6"><h1 className="text-2xl font-bold">Live Game Mode</h1><div className="flex items-center gap-3"><label>Board:</label><select className="border p-2 rounded" value={boardNumber} onChange={e=>setBoardNumber(parseInt(e.target.value,10))}><option value={1}>1</option><option value={2}>2</option></select><button onClick={updateWinners} disabled={!canUpdate} className={`px-4 py-2 rounded text-white ${canUpdate?'bg-blue-600':'bg-gray-400 cursor-not-allowed'}`}>Update Winners</button></div>{(['Q1','Q2','Q3','FINAL'] as Quarter[]).map(q=>(<div key={q} className="p-4 bg-white border rounded"><div className="font-semibold mb-2">{q}</div><div className="grid grid-cols-2 md:grid-cols-4 gap-2 items-end"><div><label className="text-xs">Away</label><input className="border p-2 w-full" type="number" value={scores[q].away} onChange={e=>setScores({...scores,[q]:{...scores[q], away: parseInt(e.target.value||'0',10)}})} /></div><div><label className="text-xs">Home</label><input className="border p-2 w-full" type="number" value={scores[q].home} onChange={e=>setScores({...scores,[q]:{...scores[q], home: parseInt(e.target.value||'0',10)}})} /></div></div></div>))}<div className="p-4 bg-white border rounded"><h2 className="font-semibold mb-2">Winners</h2><div className="grid md:grid-cols-2 gap-3">{winners.map((w:any)=>(<div key={w.id} className="p-3 border rounded"><div className="text-xs opacity-70">Quarter</div><div className="font-bold">{w.quarter}</div><div className="text-xs opacity-70 mt-2">Square</div><div className="font-bold">{w.square}</div><div className="text-xs opacity-70 mt-2">Payout</div><div className="font-bold">${w.payout?.toFixed?.(2) ?? 0}</div></div>))}{!winners.length && <div className="text-sm opacity-70">No winners yet â€” enter scores and click Update.</div>}</div></div></div>);
}
